// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package exegesis.arm.xml;

import "exegesis/arm/xml/docvars.proto";
import "exegesis/proto/instruction_encoding.proto";

// Instruction Set Architecture.
enum Isa {
  UNKNOWN_ISA = 0;
  A32 = 1;  // AArch32
  A64 = 2;  // AArch64
}

// Represents an XML index file linking to individual instruction files.
message XmlIndex {
  Isa isa = 1;

  message File {
    string filename = 1;
    string heading = 2;
    string xml_id = 3;
    string description = 4;
  }
  repeated File files = 2;
}

// The raw layout of an instruction.
// This is an intermediate representation that doesn't contain any semantic info
// about the bits themselves to facilitate the translation & validation into a
// proper FixedSizeInstructionLayout proto only once all components are merged.
message RawInstructionLayout {
  string name = 1;

  message Field {
    string name = 1;
    // Invariant: msb >= lsb && lsb >= 0.
    int32 msb = 2;  // inclusive, in [31:0]
    int32 lsb = 3;  // inclusive, in [31:0]
    // Bit value of the field, msb first, i.e. [msb..lsb].
    // Invariant: bits.size() == (msb-lsb+1).
    repeated string bits = 4;
  }
  // Invariants: no fields overlap; all fields are sorted by decreasing msb.
  repeated Field fields = 2;
}

// The nature of a raw string pattern.
// Describes the semantics of all bits in the pattern.
enum PatternType {
  UNDECIDED = 0;
  MATCHING = 1;
  NOT_MATCHING = 2;
}

// The template of an assembly instruction in text format.
message AsmTemplate {
  message Piece {
    message Symbol {
      string id = 1;
      // Label of the symbol to display in ASM templates.
      string label = 2;
      // Corresponding field(s) in the instruction encoding. This may contain
      // multiple serialized fields or even subfields, e.g: "op1:CRm<0>:op2".
      string encoded_in = 3;
      // Short human-readable description of the symbol.
      string description = 4;
      // Long human-readable explanation of the symbol, in Markdown format.
      string explanation = 5;
    }
    oneof content {
      string text = 1;
      Symbol symbol = 2;
    }
  }
  repeated Piece pieces = 1;
}

// An encoding of an instruction.
message InstructionEncoding {
  string id = 5;
  string name = 1;
  dv.DocVars docvars = 2;
  FixedSizeInstructionLayout instruction_layout = 3;

  AsmTemplate asm_template = 4;
}

// A class derived from a top-level instruction.
message InstructionClass {
  string id = 1;
  string name = 2;
  dv.DocVars docvars = 3;

  // Instruction encodings. Note that contrary to ARM XML instruction database,
  // the register layout is not stored as part of InstructionClass, but inside
  // each InstructionEncoding children to nicely integrate fields overrides.
  repeated InstructionEncoding encodings = 4;
}

// An individual instruction. Note that instruction aliases are also considered
// as instructions, but reference their root instruction as docvars.mnemonic().
message XmlInstruction {
  string xml_id = 1;
  string heading = 2;
  string brief_description = 3;
  string authored_description = 4;

  // Base DocVars for the instruction. This information will be extended by each
  // specific InstructionClass and then further extended by InstructionEncoding.
  // At a given tree level, available DocVars are those that are the same for
  // all children; i.e. DocVars for XmlInstruction is a subset of DocVars for
  // InstructionClass children, which in turn are subset of DocVars for the
  // InstructionEncoding children.
  dv.DocVars docvars = 5;

  // Instruction classes.
  repeated InstructionClass classes = 6;
}

// Represents the entire ARM XML instruction database.
message XmlDatabase {
  XmlIndex base_index = 1;
  XmlIndex fp_simd_index = 2;
  repeated XmlInstruction instructions = 3;
}
