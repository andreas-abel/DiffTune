syntax = "proto3";

package exegesis;

// Describes a fixed length instruction encoding.
// According to
// https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures#Instruction_sets
// this should cover the following instruction sets:
// ARMv8-A, Alpha, DLX, Elbrus, M32R, MIPS, MMIX, Mico32, PA-RISC, PDP-11,
// PowerPC, SPARC, SuperH, openRISC.
//
// TODO(gchatelet): Add validation code.
message FixedSizeInstructionLayout {
  // An identifier for the kind of encoding (FORM for POWER, ps_name for ARM).
  string form_name = 1;

  // A sequence of bits indexed by [msb, lsb].
  message BitRange {
    string name = 1;  // The name of the range as specified by the manual.

    // Invariant: msb >= lsb && lsb >= 0.
    int32 msb = 2;  // 0 based index, inclusive.
    int32 lsb = 3;  // 0 based index, inclusive.

    message BitPattern {
      enum Bit {
        UNKNOWN = 0;        // Needed by proto3, do not use.
        CONSTANT_ONE = 1;   // Bit is 1.
        CONSTANT_ZERO = 2;  // Bit is 0.
        VARIABLE = 3;       // Bit value is set at runtime.
      }
      // Invariant: bits.size() == (msb-lsb+1).
      repeated Bit bits = 1;
    }

    // Constraints describing the possible values of the bits in the range.
    oneof constraints {
      // A pattern representing all valid bit combinations.
      // e.g. [CONSTANT_ONE, VARIABLE, CONSTANT_ZERO]
      // would match all of "110" and "100".
      BitPattern pattern = 4;
      // A negated pattern, representing all invalid bit combinations.
      // e.g. [CONSTANT_ONE, VARIABLE, CONSTANT_ZERO]
      // would match all of "000" "001" "010" "011" "100" "101" "111"
      // but would reject "110" and "100".
      BitPattern not_pattern = 5;
    }
  }

  repeated BitRange bit_ranges = 2;  // Sorted by decreasing msb.
}
